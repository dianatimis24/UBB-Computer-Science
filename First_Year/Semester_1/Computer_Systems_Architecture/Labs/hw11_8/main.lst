     1                                  ; 8. Show for each number from 32 to 126 the value of the number (in base 8) and the character with that ASCII code.
     2                                  bits 32
     3                                  global start
     4                                  
     5                                  import printf msvcrt.dll
     6                                  import exit msvcrt.dll
     7                                  extern printf, exit
     8                                  
     9                                  ; base_8_number function is defined in the file base_8_number.asm
    10                                  extern base_8_number
    11                                  ; base_8_number(int) : int
    12                                  ;   - 1 parameter N : integer
    13                                  ;   - calculates the value of N in base 8 : integer
    14                                  ;   - return value in EAX : integer
    15                                  ;   - uses/modifies EAX, EDX, ECX, EBX
    16                                  ;   - frees stack parameters
    17                                  
    18                                  segment data use32
    19 00000000 466F7220746865206E-     	format_string db "For the number %d, we have: base 8 for = %d and ascii code = %c", 10, 13, 0
    19 00000009 756D6265722025642C-
    19 00000012 20776520686176653A-
    19 0000001B 206261736520382066-
    19 00000024 6F72203D2025642061-
    19 0000002D 6E6420617363696920-
    19 00000036 636F6465203D202563-
    19 0000003F 0A0D00             
    20                                  
    21                                  segment code use32 public code
    22                                  start:
    23 00000000 B920000000                  mov ECX, 32
    24                                      print_loop:
    25 00000005 51                              push ECX 
    26                                          
    27 00000006 89CB                            mov EBX, ECX
    28 00000008 53                              push EBX
    29 00000009 E8(00000000)                    call base_8_number
    30                                          ; EAX = base_8_number(ECX)
    31                                          
    32 0000000E 59                              pop ECX
    33 0000000F 89CA                            mov EDX, ECX
    34 00000011 51                              push ECX
    35                                          
    36 00000012 52                              push EDX
    37 00000013 50                              push EAX
    38 00000014 52                              push EDX 
    39 00000015 68[00000000]                    push format_string
    40 0000001A FF15[00000000]                  call [printf]
    41 00000020 83C410                          add ESP, 4*4
    42                                          
    43 00000023 59                              pop ECX
    44 00000024 41                              inc ECX
    45 00000025 83F97F                          cmp ECX, 127
    46 00000028 72DB                            jb print_loop  
    47                                      
    48 0000002A 6A00                    	push 0
    49 0000002C FF15[00000000]          	call [exit]
